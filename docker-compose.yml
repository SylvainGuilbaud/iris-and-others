services:
  iris:
    user: "${ISC_PACKAGE_IRISUSER}:${ISC_PACKAGE_IRISGROUP}"
    build: 
      context: .
      args:
        # - IMAGE=${IMAGE_IRIS_EM_COMMUNITY}
        # - IMAGE=${IMAGE_IRIS_CD_COMMUNITY}
        - IMAGE=${IMAGE_IRIS_PREVIEW_COMMUNITY}
      dockerfile: Dockerfile
    restart: always
    container_name: ${CONTAINER_NAME}
    hostname: ${CONTAINER_NAME}
    environment:
      - TZ=Europe/Paris
      - ISC_DATA_DIRECTORY=$ISC_DATA_DIRECTORY
      - ISC_CPF_MERGE_FILE=$ISC_CPF_MERGE_FILE
    ports: 
      - ${IRIS_SUPERSERVER_PORT}:1972
    volumes:
      - ./persistent:$ISC_DATA_DIRECTORY
      - .:/irisdev/app
      - ./data:/data
      - ./code:/code
      - ./keys:/key
      - ./jdbc:/jdbc
    # command: --key /key/iris.key 

  webgateway-apache:
    image: ${WEBGATEWAY_APACHE}
    init: true
    container_name: ${CONTAINER_NAME}-webgateway-apache
    hostname: ${CONTAINER_NAME}-webgateway-apache
    ports:
      - ${WEBGATEWAY_APACHE_PORT_HTTP}:80
      - ${WEBGATEWAY_APACHE_PORT_HTTPS}:443
    environment:
      - ISC_CSP_CONF_FILE=/webgateway/CSP.conf
      - ISC_CSP_INI_FILE=/webgateway/CSP.ini
    volumes:
      - ./webgateway-apache:/webgateway
      - ./cert:/opt/cert
  
  # webgateway-nginx:
  #       image: ${WEBGATEWAY_NGINX}
  #       init: true
  #       container_name: ${CONTAINER_NAME}-webgateway-nginx
  #       hostname: ${CONTAINER_NAME}-webgateway-nginx
  #       ports:
  #           - ${WEBGATEWAY_NGINX_PORT_HTTP}:80
  #           - ${WEBGATEWAY_NGINX_PORT_HTTPS}:443
  #       environment:
  #           - ISC_CSP_CONF_FILE=/webgateway/CSP.conf
  #           - ISC_CSP_INI_FILE=/webgateway/CSP.ini
  #       volumes:
  #       - ./webgateway-nginx:/webgateway
  #       - ./cert:/opt/cert
  #       - ./webgateway-nginx/conf:/opt/webgateway/nginx

  # oracle-db:
  #   image: container-registry.oracle.com/database/free:latest
  #   container_name: ${CONTAINER_NAME}-oracle-db
  #   hostname: oracle-db
  #   init: true
  #   environment:
  #     # - ORACLE_SID=ORCLCDB
  #     # - ORACLE_PDB=ORCLPDB1
  #     - ORACLE_PWD=Oracle_123
  #     - ENABLE_FORCE_LOGGING=true
  #     - ORACLE_CHARACTERSET=AL32UTF8
  #   ports:
  #     - ${ORACLE_PORT}:1521
  #   restart: always
  #   volumes:
  #     - ./volumes/oracle:/opt/oracle/oradata 
  #     - ./oracle:/opt/oracle/scripts/startup
  #   healthcheck:
  #     test: ["CMD", "sqlplus", "-L", "sys/Oracle_123@//localhost:11521/FREE as sysdba", "@healthcheck.sql"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5

  # postgres:
  #   container_name: ${CONTAINER_NAME}-postgres
  #   image: postgres
  #   environment:
  #     POSTGRES_PASSWORD: postgres
  #   volumes:
  #     - ./postgreSQL:/docker-entrypoint-initdb.d/
  #     - ./volumes/postgreSQL:/var/lib/postgresql/data
  #   ports:
  #     - ${POSTGRES_PORT}:5432
  #   restart: unless-stopped
  #   healthcheck:
  #       test: ["CMD", "pg_isready", "-U", "postgres"]
  #       interval: 30s
  #       timeout: 30s
  #       retries: 3

  # mysql: 
  #   # image: mysql:8.0.30
  #   image: mysql
  #   # command: --default-auth=mysql_native_password
  #   hostname: mysql 
  #   init: true
  #   container_name: ${CONTAINER_NAME}-mysql
  #   environment:
  #     - TZ=Europe/Paris
  #     - MYSQL_ROOT_PASSWORD=mysqlpass
  #     - MYSQL_DATABASE=formation
  #     - mysql_native_password=ON
  #   ports:
  #     - ${MYSQL_PORT}:3306
  #   volumes:
  #     - ./mysql/init:/docker-entrypoint-initdb.d
  #     - ./mysql/config/my.cnf:/etc/mysql/conf.d/my.cnf
  #     - ./volumes/mysql:/var/lib/mysql

  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: ${CONTAINER_NAME}-prometheus
  #   restart: unless-stopped
  #   ports:
  #     - ${PROMETHEUS_PORT}:9090
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #     - ./isc_alert_rules.yml:/etc/prometheus/isc_alert_rules.yml
  #     - ./volumes/prometheus:/prometheus

  # grafana:
  #   image: grafana/grafana:latest
  #   container_name:  ${CONTAINER_NAME}-grafana
  #   restart: unless-stopped
  #   ports:
  #     - ${GRAFANA_PORT}:3000
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=ADMIN
  #     - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
  #     - GF_AUTH_ANONYMOUS_ENABLED=true
  #     - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
  #     - GF_FEATURE_TOGGLES_ENABLE=alertingSimplifiedRouting,alertingQueryAndExpressionsStepMode
  #   entrypoint:
  #     - sh
  #     - -euc
  #     - |
  #       mkdir -p /etc/grafana/provisioning/datasources
  #       cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
  #       apiVersion: 1
  #       datasources:
  #       - name: Loki
  #         type: loki
  #         access: proxy 
  #         orgId: 1
  #         url: http://host.docker.internal:13100
  #         basicAuth: false
  #         isDefault: true
  #         version: 1
  #         editable: false
  #       EOF
  #       /run.sh
  #   volumes:
  #     - ./volumes/grafana:/var/lib/grafana
  #   depends_on:
  #     - prometheus

  # loki:
  #   image: grafana/loki:latest
  #   container_name: ${CONTAINER_NAME}-loki
  #   ports:
  #     - ${LOKI_PORT}:3100
  #   command: -config.file=/etc/loki/local-config.yaml

  # promtail:
  #   image: grafana/promtail:latest
  #   container_name: ${CONTAINER_NAME}-promtail
  #   volumes:
  #     - ./persistent/mgr:/var/log
  #   command: -config.file=/etc/promtail/config.yml

 

